generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Priority{
  Low,
  Medium,
  High
}

model User {
  id            String         @id @default(cuid())
  name          String
  lastname      String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())

  exams         Exam[]
  userGrades    UserGrade[]   
  studySessions StudySession[]
  subjects      Subject[]
  weeklyGoal    WeeklyGoal?
  subjectGoals  SubjectGoal[]
  toDoList toDo[]
}

model Subject {
  id            Int            @id @default(autoincrement())
  name          String
  userId        String
  studySessions StudySession[]
  user          User           @relation(fields: [userId], references: [id])
  userGrades    UserGrade[]  
  subjectGoal   SubjectGoal?

  @@unique([name, userId])
}

model StudySession {
  id        Int      @id @default(autoincrement())
  subjectId Int
  topic     String
  startTime DateTime
  endTime   DateTime
  duration  Int
  userId    String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Exam {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model UserGrade {
  id        String   @id @default(cuid()) 
  grades    String[] 
  userId    String
  subjectId Int
  user      User     @relation(fields: [userId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
}

model WeeklyGoal {
  id          String   @id @default(cuid())
  target      Int    
  completion  Int     
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
}

model SubjectGoal {
  id         String   @id @default(cuid())
  target     Int
  completion Int      @default(0)
  isCompleted Boolean @default(false)
  userId     String
  subjectId  Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])

  @@index([userId])
  @@index([subjectId])
}


model toDo {
  id          String   @id @default(cuid())
  task String
  priority Priority @default(Medium)
  isCompleted Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
   createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}