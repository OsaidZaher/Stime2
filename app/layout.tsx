import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Footer from "@/components/footer";
import { ThemeProvider } from "@/components/themeprovider";
import { Toaster } from "sonner";
import ClientSessionProvider from "@/components/client-session-provider";
import { ColorThemeProvider } from "@/components/ui/colorPicker";
import { TimeProvider } from "./contexts/TimerContext";
import { ClerkMiddlewareAuthObject } from "@clerk/nextjs/server";
import {
  ClerkProvider,
  SignInButton,
  SignUpButton,
  SignedIn,
  SignedOut,
  UserButton,
} from "@clerk/nextjs";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "time",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="icon" href="/logo_no_bg.png" type="image/png" />
        <link
          href="https://fonts.googleapis.com/css2?family=Great+Vibes&display=swap"
          rel="stylesheet"
        />
        <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                try {
                  var savedTheme = localStorage.getItem('colorTheme');
                  if (savedTheme) {
                    document.documentElement.classList.add(savedTheme);
                    
                    // Set initial CSS variables
                    var root = document.documentElement;
                    root.style.setProperty("--theme-primary", "var(--" + savedTheme + "-primary)");
                    root.style.setProperty("--theme-primary-lighter", "var(--" + savedTheme + "-primary-lighter)");
                    root.style.setProperty("--theme-primary-darker", "var(--" + savedTheme + "-primary-darker)");
                    root.style.setProperty("--theme-gradient", "var(--" + savedTheme + "-gradient)");
                    root.style.setProperty("--theme-dark-gradient", "var(--" + savedTheme + "-dark-gradient)");
                    root.style.setProperty("--theme-gradient2", "var(--" + savedTheme + "-gradient2)");
                    root.style.setProperty("--theme-gradient2-dark", "var(--" + savedTheme + "-gradient2-dark)");
                    root.style.setProperty("--theme-50", "var(--" + savedTheme + "-primary-50)");
                    root.style.setProperty("--theme-100", "var(--" + savedTheme + "-primary-100)");
                    root.style.setProperty("--theme-200", "var(--" + savedTheme + "-primary-200)");
                    root.style.setProperty("--theme-300", "var(--" + savedTheme + "-primary-300)");
                    root.style.setProperty("--theme-400", "var(--" + savedTheme + "-primary-400)");
                    root.style.setProperty("--theme-700", "var(--" + savedTheme + "-700)");
                    root.style.setProperty("--theme-950", "var(--" + savedTheme + "-primary-950)");
                    root.style.setProperty("--theme-800", "var(--" + savedTheme + "-primary-800)");
                    root.style.setProperty("--theme-600", "var(--" + savedTheme + "-primary-600)");
                    root.style.setProperty("--theme-light-bg", "var(--" + savedTheme + "-primary-50)");
                    root.style.setProperty("--theme-oklch-gradient", "var(--" + savedTheme + "-gradient2)");
                    root.style.setProperty("--theme-oklch-gradient-dark", "var(--" + savedTheme + "-gradient2-dark)");
                  }
                } catch (e) { console.error('Theme initialization error:', e); }
              })();
            `,
          }}
        />
      </head>
      <body
        className={`${inter.className} min-h-screen flex flex-col`}
        suppressHydrationWarning
      >
        <ClerkProvider>
          <ClientSessionProvider>
            <ThemeProvider
              attribute="class"
              defaultTheme="system"
              enableSystem
              disableTransitionOnChange
              storageKey="theme-preference"
            >
              <ColorThemeProvider>
                <TimeProvider>
                  <main className="flex-grow">{children}</main>
                  <footer className="mt-auto">
                    <Footer />
                  </footer>
                  <Toaster />
                </TimeProvider>
              </ColorThemeProvider>
            </ThemeProvider>
          </ClientSessionProvider>
        </ClerkProvider>
      </body>
    </html>
  );
}
